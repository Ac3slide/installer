#!/bin/bash

if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

checkTagExist docker-latest-offirepo.success

rootDir=$(rootDir)
checkTempDir
dockermachineUrl=https://github.com/docker/machine/releases/download/v0.16.1
dmServerUrl=https://raw.githubusercontent.com/OriHoch/docker-machine-server/v0.0.5/
engineInstallUrl=https://releases.rancher.com/install-docker/18.09.sh
kamateraDriverUrl=https://github.com/OriHoch/docker-machine-driver-kamatera/releases/download/v1.0.2/docker-machine-driver-kamatera_v1.0.2_linux_amd64.tar.gz
machineScript=docker-machine-server.sh
clusterScript=kamatera-cluster.sh
export RANCHER_VERSION=v2.2.4
export email=$ADMINEMAIL
clientId=`cat ${CWMCONFIGFILE} | grep apiClientId | cut -d '=' -f 2`
secret=`cat ${CWMCONFIGFILE} | grep apiSecret | cut -d '=' -f 2`
vlan=`cat ${CWMCONFIGFILE}  | grep lan | grep -v wan | cut -d'=' -f 2`
datacenter=$ZONE
servername=$(echo $VMNAME | tr -cd [:alnum:])
ranchername="qa-omc-rancher-${datacenter}-${servername:: 30}"

echo "Docker Machine 0.16.1 INSTALL" | log
# curl -L --url $dockermachineUrl/docker-machine-$(uname -s)-$(uname -m) --retry-connrefused --retry 3 --retry-delay 2 --max-redirs 3 --max-time 30 >/tmp/docker-machine
cd $rootDir/temp
dmFile=docker-machine-$(uname -s)-$(uname -m)
curlDownload $dockermachineUrl/$dmFile
waitOrStop 0
install $dmFile /usr/local/bin/docker-machine
waitOrStop 0

echo "install Jq" | log
apt install -y jq
waitOrStop 0
checkPackageInstalled jq

echo "Install the ${machineScript} script" | log
# curl -s -L $dmServerUrl/$machineScript | tee /usr/local/bin/$machineScript >/dev/null
curlDownload $dmServerUrl/$machineScript
waitOrStop 0
chmod +x $machineScript
mv $machineScript /usr/local/bin/

echo "Install the ${clusterScript} script" | log
# curl -s -L $dmServerUrl/scripts/$clusterScript | tee /usr/local/bin/$clusterScript >/dev/null
curlDownload $dmServerUrl/scripts/$clusterScript
waitOrStop 0
chmod +x $clusterScript
mv $clusterScript /usr/local/bin/
sed -i 's/read -p "LETSENCRYPT_EMAIL: " -e -i "${LETSENCRYPT_EMAIL}" LETSENCRYPT_EMAIL/LETSENCRYPT_EMAIL="${email}"/' /usr/local/bin/$clusterScript
sed -i 's/read -p "RANCHER_DOMAIN_NAME: " -e -i "${RANCHER_DOMAIN_NAME}" RANCHER_DOMAIN_NAME/RANCHER_DOMAIN_NAME="rancher.$(docker-machine ip $(docker-machine active) | sed  '"'"'s;\\.;-;g'"'"').cloud-xip.io"/' /usr/local/bin/$clusterScript

echo "Installing Rancher" | log
${clusterScript} "0.0.5" "${vlan}" << EOF
${clientId}
${secret}
7
/usr/local/bin
${ranchername}
4096
2B
${datacenter}
50
EOF

: <<'END'

activemachine=`docker-machine ls | grep ${ranchername} | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"`

echo "Waiting for Rancher to intialize" | log
HTTPD=`curl -s -o /dev/null -w ''%{http_code}'' https://${activemachine}:443 --insecure`
until [ "$HTTPD" == "200" ]; do
    sleep 3
    HTTPD=`curl -s -o /dev/null -w ''%{http_code}'' https://${activemachine}:443 --insecure`
done
sleep 15

curlBaseParams="--insecure --silent --retry-connrefused --retry 3 --retry-delay 2 -H 'content-type: application/json'"

echo "Getting Rancher Login Token" | log
LOGINRESPONSE=`curl --url "https://${activemachine}/v3-public/localProviders/local?action=login" --data-binary '{"username":"admin","password":"admin"}' $curlBaseParams`
LOGINTOKEN=`echo $LOGINRESPONSE | jq -r .token`

echo "Changing Web Interface Password" | log
curl --url "https://${activemachine}/v3/users?action=changepassword" --data-binary '{"currentPassword":"admin","newPassword":"'${ADMINPASSWORD}'"}' -H "Authorization: Bearer $LOGINTOKEN" $curlBaseParams  

echo "Creating API key" | log
APIRESPONSE=`curl --url "https://${activemachine}/v3/token" --data-binary '{"type":"token","description":"automation"}' -H "Authorization: Bearer $LOGINTOKEN" $curlBaseParams`
echo "Getting API Token" | log
APITOKEN=`echo $APIRESPONSE | jq -r .token`

echo "Listing available Node drivers" | log
NODEDRIVERS=`curl --url "https://${activemachine}/v3/nodedrivers" -H "Authorization: Bearer $APITOKEN" $curlBaseParams | jq -r .data[].actions.deactivate`

echo "Deactivating foreign drivers" | log
for url in ${NODEDRIVERS}; do 

    curl --url "$url" -d '{}' -X POST -H "Authorization: Bearer $APITOKEN" $curlBaseParams

done

echo "Adding Kamatera Docker Machine Driver" | log
curl --url "https://${activemachine}/v3/nodedrivers" -d '{"active":true, "builtin":false, "url":"'${kamateraDriverUrl}'", "whitelistDomains":[]}' -X POST -H "Authorization: Bearer $APITOKEN" $curlBaseParams 

echo "Listing available Kubernetes drivers" | log
KONTAINERDRIVERS=`curl --url "https://${activemachine}/v3/kontainerdrivers" -H "Authorization: Bearer $APITOKEN" $curlBaseParams | jq -r .data[].actions.deactivate`

echo "Deactivating foreign drivers" | log
for url in ${KONTAINERDRIVERS}; do 

    curl --url "$url" -d '{}' -X POST -H "Authorization: Bearer $APITOKEN" $curlBaseParams 

done

echo "Creating Kamatera templates on Rancher" | log
sleep 10
# Kamatera Control Plane
PLANE_JSON_STRING='{
"engineInsecureRegistry":[],
"engineInstallURL":"'"${engineInstallUrl}"'",
"engineRegistryMirror":[],
"engineStorageDriver":"overlay2",
"kamateraConfig":{
"apiClientId":"'"${clientId}"'",
"apiSecret":"'"${secret}"'",
"billing":"hourly",
"cpu":"2B",
"createServerCommandId":"0",
"datacenter":"'"${datacenter}"'",
"diskSize":"30",
"image":"ubuntu_server_18.04_64-bit",
"privateNetworkIp":"",
"privateNetworkName":"'"${vlan}"'",
"ram":"2048",
"type":"kamateraConfig"
},
"name":"Kamatera Control Plane",
"useInternalIpAddress":true
}'
curl --url "https://${activemachine}/v3/nodetemplates" -d $(jsonize "$PLANE_JSON_STRING") -X POST -H "Authorization: Bearer $APITOKEN" $curlBaseParams | log
#Kamatera Worker
WORKER_JSON_STRING='{
"engineInsecureRegistry":[],
"engineInstallURL":"'"${engineInstallUrl}"'",
"engineRegistryMirror":[],
"engineStorageDriver":"overlay2",
"kamateraConfig":{
"apiClientId":"'"${clientId}"'",
"apiSecret":"'"${secret}"'",
"billing":"hourly",
"cpu":"2B",
"createServerCommandId":"0",
"datacenter":"'"${datacenter}"'",
"diskSize":"50",
"image":"ubuntu_server_18.04_64-bit",
"privateNetworkIp":"",
"privateNetworkName":"'"${vlan}"'",
"ram":"4096",
"type":"kamateraConfig"
},
"name":"Kamatera Worker",
"useInternalIpAddress":true
}'
curl --url "https://${activemachine}/v3/nodetemplates" -d $(jsonize "$WORKER_JSON_STRING") -X POST -H "Authorization: Bearer $APITOKEN" $curlBaseParams | log

echo "Adding descriptions" | log
descriptionAppend "Rancher web UI: https://${activemachine}"
descriptionAppend "Rancher admin user: admin"
descriptionAppend "Rancher admin password: ${ADMINPASSWORD}"
descriptionAppend " "

tagScript success

END

exit 0