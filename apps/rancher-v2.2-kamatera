#!/bin/bash

if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

checkTagExist docker-latest-offirepo.success

rootDir=$(rootDir)
checkTempDir
dockermachineUrl=https://github.com/docker/machine/releases/download/v0.16.1
engineInstallUrl=https://releases.rancher.com/install-docker/18.09.sh
dmServerUrl=https://raw.githubusercontent.com/OriHoch/docker-machine-server/v0.0.5/
kamateraDriverUrl=https://github.com/OriHoch/docker-machine-driver-kamatera/releases/download/v1.0.2/docker-machine-driver-kamatera_v1.0.2_linux_amd64.tar.gz

RANCHER_VERSION=v2.2.8
clientId=`cat ${CWMCONFIGFILE} | grep apiClientId | cut -d '=' -f 2`
secret=`cat ${CWMCONFIGFILE} | grep apiSecret | cut -d '=' -f 2`

echo "install Jq" | log
apt install -y jq
waitOrStop 0
checkPackageInstalled jq

mkdir -p /var/lib/letsencrypt/.well-known
chgrp www-data /var/lib/letsencrypt
chmod g+s /var/lib/letsencrypt

activemachine=`hostname -I | cut -d ' ' -f 1`
rancherDomain="rancher.${activemachine//./-}.cloud-xip.io"

cat << EOF > /etc/nginx/snippets/letsencrypt.conf
location ^~ /.well-known/acme-challenge/ {
  allow all;
  root /var/lib/letsencrypt/;
  default_type "text/plain";
  try_files \$uri =404;
}
EOF

cat << EOF >> /etc/nginx/sites-enabled/default
server {
  listen 80;
  server_name _;
  include snippets/letsencrypt.conf;
  location / {
      return 200 "it works!";
      add_header Content-Type text/plain;
  }
}
EOF 

certbot certonly --agree-tos -n --email ${ADMINEMAIL} --webroot -w /var/lib/letsencrypt/ -d ${rancherDomain}

cat << EOF >> /etc/nginx/sites-enabled/default
map \$http_upgrade \$connection_upgrade {
    default Upgrade;
    ''      close;
}
server {
        listen 443 ssl;
        server_name _;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        ssl_session_timeout 5m;
        ssl_session_cache shared:SSL:10m;
        add_header Strict-Transport-Security max-age=31536000;

        ssl_certificate      /path/to/your.crt;
        ssl_certificate_key  /path/to/your.key;

        location / {
           proxy_pass       http://127.0.0.1:8000;
           proxy_set_header X-Forwarded-For \$remote_addr;
           proxy_set_header Host \$http_host;
           proxy_set_header X-Forwarded-Proto \$scheme;
           proxy_set_header X-Forwarded-Port \$server_port;
           proxy_http_version 1.1;
           proxy_set_header Upgrade \$http_upgrade;
           proxy_set_header Connection \$connection_upgrade;
           proxy_read_timeout 900s;
        }
}
EOF 

sed -i "s|/path/to/your.key|/etc/letsencrypt/live/${rancherDomain}/privkey.pem|" /etc/nginx/sites-enabled/default
sed -i "s|/path/to/your.crt|/etc/letsencrypt/live/${rancherDomain}/fullchain.pem|" /etc/nginx/sites-enabled/default

systemctl restart nginx

mkdir -p /var/lib/rancher 
systemctl start docker.service
docker run -d --name rancher --restart unless-stopped -p 8000:80 -v "/var/lib/rancher:/var/lib/rancher" "rancher/rancher:${RANCHER_VERSION}"

curlBaseParams=( --silent -S --retry-connrefused --retry 3 --retry-delay 2 -H 'content-type: application/json')

echo "Waiting for Rancher to intialize" | log
HTTPD=`curl -s -o /dev/null -w ''%{http_code}'' https://${activemachine}:443 --insecure`
until [ "$HTTPD" == "200" ]; do
    sleep 3
    HTTPD=`curl -s -o /dev/null -w ''%{http_code}'' https://${activemachine}:443 --insecure`
done
sleep 15

echo "Getting Rancher Login Token" | log
LOGINRESPONSE=`curl --url "https://${rancherDomain}/v3-public/localProviders/local?action=login" --data-binary '{"username":"admin","password":"admin"}' "${curlBaseParams[@]}"`
LOGINTOKEN=`echo $LOGINRESPONSE | jq -r .token`

echo "Changing Web Interface Password" | log
curl --url "https://${rancherDomain}/v3/users?action=changepassword" --data-binary '{"currentPassword":"admin","newPassword":"'${ADMINPASSWORD}'"}' -H "Authorization: Bearer $LOGINTOKEN" "${curlBaseParams[@]}"  

echo "Creating API key" | log
APIRESPONSE=`curl --url "https://${rancherDomain}/v3/token" --data-binary '{"type":"token","description":"automation"}' -H "Authorization: Bearer $LOGINTOKEN" "${curlBaseParams[@]}"`
echo "Getting API Token" | log
APITOKEN=`echo $APIRESPONSE | jq -r .token`

echo "Listing available Node drivers" | log
NODEDRIVERS=`curl --url "https://${rancherDomain}/v3/nodedrivers" -H "Authorization: Bearer $APITOKEN" "${curlBaseParams[@]}" | jq -r .data[].actions.deactivate`

echo "Deactivating foreign drivers" | log
for url in ${NODEDRIVERS}; do 

    curl --url "$url" -d '{}' -X POST -H "Authorization: Bearer $APITOKEN" "${curlBaseParams[@]}"

done

echo "Adding Kamatera Docker Machine Driver" | log
curl --url "https://${rancherDomain}/v3/nodedrivers" -d '{"active":true, "builtin":false, "url":"'${kamateraDriverUrl}'", "whitelistDomains":[]}' -X POST -H "Authorization: Bearer $APITOKEN" "${curlBaseParams[@]}" 

echo "Listing available Kubernetes drivers" | log
KONTAINERDRIVERS=`curl --url "https://${rancherDomain}/v3/kontainerdrivers" -H "Authorization: Bearer $APITOKEN" "${curlBaseParams[@]}" | jq -r .data[].actions.deactivate`

echo "Deactivating foreign drivers" | log
for url in ${KONTAINERDRIVERS}; do 

    curl --url "$url" -d '{}' -X POST -H "Authorization: Bearer $APITOKEN" "${curlBaseParams[@]}" 

done

echo "Creating Kamatera templates on Rancher" | log
sleep 10
# Kamatera Control Plane
PLANE_JSON_STRING='{
"engineInsecureRegistry":[],
"engineInstallURL":"'"${engineInstallUrl}"'",
"engineRegistryMirror":[],
"engineStorageDriver":"overlay2",
"kamateraConfig":{
"apiClientId":"'"${clientId}"'",
"apiSecret":"'"${secret}"'",
"billing":"hourly",
"cpu":"2B",
"createServerCommandId":"0",
"datacenter":"'"${ZONE}"'",
"diskSize":"30",
"image":"ubuntu_server_18.04_64-bit",
"privateNetworkIp":"",
"privateNetworkName":"'"${vlan}"'",
"ram":"2048",
"type":"kamateraConfig"
},
"name":"Kamatera Control Plane",
"useInternalIpAddress":true
}'
curl --url "https://${rancherDomain}/v3/nodetemplates" -d $(jsonize "$PLANE_JSON_STRING") -X POST -H "Authorization: Bearer $APITOKEN" "${curlBaseParams[@]}" | log
#Kamatera Worker
WORKER_JSON_STRING='{
"engineInsecureRegistry":[],
"engineInstallURL":"'"${engineInstallUrl}"'",
"engineRegistryMirror":[],
"engineStorageDriver":"overlay2",
"kamateraConfig":{
"apiClientId":"'"${clientId}"'",
"apiSecret":"'"${secret}"'",
"billing":"hourly",
"cpu":"2B",
"createServerCommandId":"0",
"datacenter":"'"${ZONE}"'",
"diskSize":"50",
"image":"ubuntu_server_18.04_64-bit",
"privateNetworkIp":"",
"privateNetworkName":"'"${vlan}"'",
"ram":"4096",
"type":"kamateraConfig"
},
"name":"Kamatera Worker",
"useInternalIpAddress":true
}'
curl --url "https://${rancherDomain}/v3/nodetemplates" -d $(jsonize "$WORKER_JSON_STRING") -X POST -H "Authorization: Bearer $APITOKEN" "${curlBaseParams[@]}" | log

echo "Adding descriptions" | log
rancherServerPass="$(docker-machine inspect ${ranchername} | jq -r '.Driver.Password')"
descriptionAppend "Rancher web UI: https://${rancherDomain}"
descriptionAppend "Rancher web UI user: admin"
descriptionAppend "Rancher web UI password: ${ADMINPASSWORD}"
descriptionAppend " "
descriptionAppend "Rancher server address: ${activemachine}"
descriptionAppend "Rancher server root user: root"
descriptionAppend "Rancher server root password: ${rancherServerPass}"
descriptionAppend " "

tagScript success

exit 0