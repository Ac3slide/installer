#!/bin/bash

if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

rootDir=$(rootDir)

echo "Get ansible Role" | log
ansible-galaxy install severalnines.clustercontrol | log
waitOrStop 0 "Failed Get ansible Role"

echo "install MariaDB" | log
installPackage mariadb-server | log
waitOrStop 0 "Failed install MariaDB - server"
installPackage mariadb-client | log
waitOrStop 0 "Failed install MariaDB - client"

apt update

echo "Create ansible playbook" | log
cd /root
touch cc.playbook
cat <<EOF > cc.playbook
- hosts: localhost
  roles:
    - { role: severalnines.clustercontrol }
EOF

echo "runing playbook" | log
ansible-playbook cc.playbook | log





#### SSL ####
echo "Installing certbot for apache" | log
installPackage python3-certbot-apache
waitOrStop 0 "Failed apt install: python-certbot-apache"


## applying ssl for cc web app ##
systemctl stop apache2.service
execSpecial 3 '(fail|error)' certbot certonly -n --standalone --preferred-challenges http --agree-tos --email ${ADMINEMAIL} -d ${CWM_DOMAIN} ${CWM_DEBUG:+"--test-cert"}

if [[ $? == 1 ]]
then
export certbot_failed=1
echo "Generating self-signed certificate" | log
#waitOrStop 0 "Failed certbot certificate generation"
mkdir /etc/letsencrypt/live
mkdir /etc/letsencrypt/live/${CWM_DOMAIN}
openssl req -x509 -sha256 -newkey rsa:2048 -keyout /etc/letsencrypt/live/${CWM_DOMAIN}/privkey.pem -out /etc/letsencrypt/live/${CWM_DOMAIN}/fullchain.pem -days 1024 -nodes -subj '/CN=localhost'
waitOrStop 0 "Certificate creation failed"

# Sending log to log server - 45-93-93-142.cloud-xip.com
curl -v -X POST -D -H "Content-Type: application/x-www-form-urlencoded" -d "vm_name='$CWM_NAME'&image_name='$CWM_OS'&vm_owner='$ADMINEMAIL'" http://45-93-93-142.cloud-xip.com


else
export certbot_failed=0
fi

export CWM_DISPLAYED_ADDRESS="${CWM_DOMAIN}"
systemctl start apache2.service
waitOrStop 0 "Failed to start Apache service"
tag global-domain-set.success



echo "Reconfigure SSL in Vhost" | log
sed -i "s|^[ \t]*SSLCertificateFile.*|SSLCertificateFile /etc/letsencrypt/live/$CWM_DOMAIN/fullchain.pem|g" /etc/apache2/sites-available/s9s-ssl.conf
sed -i "s|^[ \t]*SSLCertificateKeyFile.*|SSLCertificateKeyFile /etc/letsencrypt/live/$CWM_DOMAIN/privkey.pem|g" /etc/apache2/sites-available/s9s-ssl.conf

waitOrStop 0 "Failed Reconfigure SSL in Vhost"
systemctl restart apache2.service
waitOrStop 0 "Failed restart apache2.service"

#### SSL END ####

## Remove Ansible ##
apt-get remove -y ansible


## Create new rpc-key and modify relevant files ##
random_rpc=$(date +%s | sha256sum | base64 | head -c 32 ; echo)
echo "rpc_key=${random_rpc}" >> /etc/cmon.cnf
sed -i "s|define('RPC_TOKEN'|//define('RPC_TOKEN'|g" /var/www/html/clustercontrol/bootstrap.php
echo "define('RPC_TOKEN', '${random_rpc}');" >> /var/www/html/clustercontrol/bootstrap.php

## Deploy Galera Clustyer ##

ips=(192.168.0.1 192.168.0.2 192.168.0.3)
#echo "generate ssh keys" | log #to remove
#echo "yes" | ssh-keygen -t rsa -b 2048 -f /root/.ssh/id_rsa -q -N "" # to remove

# wait until cmon is up
echo "waiting for cmon" | log
while ! nc -z localhost 9501; do
  sleep 1
done

echo "Fix issues with admin user:" | log
echo "backing up s9s.conf to backup" | log
mv /root/.s9s/s9s.conf /root/.s9s/s9s.conf.bak
mv /etc/s9s.conf /etc/s9s.conf.b
echo "Creating dba user to enable admin" | log
s9s user --create --generate-key --controller="https://localhost:9501" --group=admins dba
sleep 30
s9s user --cmon-user=dba --enable admin
sleep 30
echo "using reset ccrpc script" | log
echo "yes" | /var/www/clustercontrol/app/tools/reset-ccrpc.sh
sleep 30

echo "adding public key to nodes" | log
apt-get install sshpass
ips=(192.168.1.1 192.168.1.2 192.168.1.3)

echo "Coping ssh-keys nodes" | log
sshpass -p ${ADMINPASSWORD} ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /root/.ssh/id_rsa root@192.168.1.1 'cat >> /root/.ssh/authorized_keys' < /root/.ssh/id_rsa.pub | log

sshpass -p ${ADMINPASSWORD} ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /root/.ssh/id_rsa root@192.168.1.2 'cat >> /root/.ssh/authorized_keys' < /root/.ssh/id_rsa.pub | log

sshpass -p ${ADMINPASSWORD} ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /root/.ssh/id_rsa root@192.168.1.3 'cat >> /root/.ssh/authorized_keys' < /root/.ssh/id_rsa.pub | log



#for ip in "${ips[@]}"; do
#  echo "Copying SSH key to $ip"
#  #echo "${ADMINPASSWORD}" | sshpass ssh-copy-id -i /root/.ssh/id_rsa.pub root@$ip # To remove
#  sshpass -p '${ADMINPASSWORD}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /root/.ssh/id_rsa root@$ip 'cat >> /root/.ssh/#authorized_keys' < /root/.ssh/id_rsa.pub
#  sleep 10
#done


echo "Deploying: Run Galera (percona) with 3 servers" | log
s9s cluster --create \
        --cluster-type=galera \
        --nodes="192.168.1.1;192.168.1.2;192.168.1.3" \
        --vendor=percona \
        --provider-version=5.7 \
        --db-admin-passwd='${ADMINPASSWORD}' \
        --os-user=root \
        --os-key-file=/root/.ssh/id_rsa \
        --cluster-name='Percona XtraDB Cluster 5.7'

echo "waiting to ClusterControl to finnish deployment" | log
job_id=$(s9s job --list | grep "Creating a Cluster" | awk '{print $1}')
s9s job --wait $job_id

echo "Adding descriptions" | log
descriptionAppend "Run before registration:/var/www/html/clustercontrol/app/tools/reset-ccrpc.sh "
descriptionAppend "cmon config files location: /etc/cmon.cnf"
descriptionAppend "mariaDB user password: ${ADMINPASSWORD}"
descriptionAppend "clustercontrol web page: ${CWM_DOMAIN}/clustercontrol"
descriptionAppend "clustercontrol webpage config: /var/www/clustercontrol/bootstrap.php"
descriptionAppend "rpc-key: ${random_rpc}"
descriptionAppend " "



tag ssl-ready.success
tagScript success
tag apache2.success
tag certbot-apache2.success
tagScript success
exit 0
