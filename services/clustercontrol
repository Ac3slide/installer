#!/bin/bash

if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

rootDir=$(rootDir)

####### Deploying CWM Nodes #######
## NODE 1
clientId=${CWM_APICLIENTID}
secret=${CWM_APISECRET}
datacenter=${CWM_ZONE}

# temporal hardcode
node_num=1
name="${CWM_NAME}_NODE_${node_num}"
password=${ADMINPASSWORD}
cpu="2B"
ram="2048"
billing="monthly"
managed="0"
backup="0"
power="1"
traffic="3"
disk_size_0="10"
# note: parameters requires url encoding - ubuntu 20
disk_src_0="${CWM_ZONE}:6000C29f313b496da71f669782d04b75"
network_name_0="wan"
network_name_1=$CWM_VLAN1
# Extract the first three octets of the IP address
FIRST_THREE_OCTETS="${CWM_IP1%.*}"
# Set the last octet to a new value
NEW_LAST_OCTET="201"
# Combine the first three octets and the new last octet to form the new IP address
NEW_IP_ADDRESS="$FIRST_THREE_OCTETS.$NEW_LAST_OCTET"
# Print the new IP address
echo $NEW_IP_ADDRESS
network_ip_1=$NEW_IP_ADDRESS
node_1_ip=$network_ip_1

params="datacenter=${datacenter}"
params+="&name=${name}"
params+="&password=${password}"
params+="&cpu=${cpu}"
params+="&ram=${ram}"
params+="&billing=${billing}"
params+="&managed=${managed}"
params+="&backup=${backup}"
params+="&power=${power}"
params+="&traffic=${traffic}"
params+="&disk_size_0=${disk_size_0}"
params+="&disk_src_0=${disk_src_0}"
params+="&network_name_0=${network_name_0}"
params+="&network_name_1=${network_name_1}"
params+="&network_ip_1=${network_ip_1}"

curl -H "AuthClientId: ${clientId}" -H "AuthSecret: ${secret}" -X POST -d "${params}" "https://null.cloudwm.com/service/server"


##NODE 2
# temporal hardcode
node_num=2
name="${CWM_NAME}_NODE_${node_num}"
FIRST_THREE_OCTETS="${CWM_IP1%.*}"
# Set the last octet to a new value
NEW_LAST_OCTET="202"
# Combine the first three octets and the new last octet to form the new IP address
NEW_IP_ADDRESS="$FIRST_THREE_OCTETS.$NEW_LAST_OCTET"
# Print the new IP address
echo $NEW_IP_ADDRESS
network_ip_1=$NEW_IP_ADDRESS
node_2_ip=$network_ip_1

params="datacenter=${datacenter}"
params+="&name=${name}"
params+="&password=${password}"
params+="&cpu=${cpu}"
params+="&ram=${ram}"
params+="&billing=${billing}"
params+="&managed=${managed}"
params+="&backup=${backup}"
params+="&power=${power}"
params+="&traffic=${traffic}"
params+="&disk_size_0=${disk_size_0}"
params+="&disk_src_0=${disk_src_0}"
params+="&network_name_0=${network_name_0}"
params+="&network_name_1=${network_name_1}"
params+="&network_ip_1=${network_ip_1}"

curl -H "AuthClientId: ${clientId}" -H "AuthSecret: ${secret}" -X POST -d "${params}" "https://null.cloudwm.com/service/server"


##NODE 3
# temporal hardcode
node_num=3
name="${CWM_NAME}_NODE_${node_num}"
FIRST_THREE_OCTETS="${CWM_IP1%.*}"
# Set the last octet to a new value
NEW_LAST_OCTET="203"
# Combine the first three octets and the new last octet to form the new IP address
NEW_IP_ADDRESS="$FIRST_THREE_OCTETS.$NEW_LAST_OCTET"
# Print the new IP address
echo $NEW_IP_ADDRESS
network_ip_1=$NEW_IP_ADDRESS
node_3_ip=$network_ip_1

params="datacenter=${datacenter}"
params+="&name=${name}"
params+="&password=${password}"
params+="&cpu=${cpu}"
params+="&ram=${ram}"
params+="&billing=${billing}"
params+="&managed=${managed}"
params+="&backup=${backup}"
params+="&power=${power}"
params+="&traffic=${traffic}"
params+="&disk_size_0=${disk_size_0}"
params+="&disk_src_0=${disk_src_0}"
params+="&network_name_0=${network_name_0}"
params+="&network_name_1=${network_name_1}"
params+="&network_ip_1=${network_ip_1}"

curl -H "AuthClientId: ${clientId}" -H "AuthSecret: ${secret}" -X POST -d "${params}" "https://null.cloudwm.com/service/server"
####################################


echo "Get ansible Role" | log
ansible-galaxy install severalnines.clustercontrol | log
waitOrStop 0 "Failed Get ansible Role"

echo "install MariaDB" | log
installPackage mariadb-server | log
waitOrStop 0 "Failed install MariaDB - server"
installPackage mariadb-client | log
waitOrStop 0 "Failed install MariaDB - client"

apt update

echo "Create ansible playbook" | log
cd /root
touch cc.playbook
cat <<EOF > cc.playbook
- hosts: localhost
  roles:
    - { role: severalnines.clustercontrol }
EOF

echo "runing playbook" | log
ansible-playbook cc.playbook | log





#### SSL ####
echo "Installing certbot for apache" | log
installPackage python3-certbot-apache
waitOrStop 0 "Failed apt install: python-certbot-apache"


## applying ssl for cc web app ##
systemctl stop apache2.service
execSpecial 3 '(fail|error)' certbot certonly -n --standalone --preferred-challenges http --agree-tos --email ${ADMINEMAIL} -d ${CWM_DOMAIN} ${CWM_DEBUG:+"--test-cert"}

if [[ $? == 1 ]]
then
export certbot_failed=1
echo "Generating self-signed certificate" | log
#waitOrStop 0 "Failed certbot certificate generation"
mkdir /etc/letsencrypt/live
mkdir /etc/letsencrypt/live/${CWM_DOMAIN}
openssl req -x509 -sha256 -newkey rsa:2048 -keyout /etc/letsencrypt/live/${CWM_DOMAIN}/privkey.pem -out /etc/letsencrypt/live/${CWM_DOMAIN}/fullchain.pem -days 1024 -nodes -subj '/CN=localhost'
waitOrStop 0 "Certificate creation failed"

# Sending log to log server - 45-93-93-142.cloud-xip.com
curl -v -X POST -D -H "Content-Type: application/x-www-form-urlencoded" -d "vm_name='$CWM_NAME'&image_name='$CWM_OS'&vm_owner='$ADMINEMAIL'" http://45-93-93-142.cloud-xip.com


else
export certbot_failed=0
fi

export CWM_DISPLAYED_ADDRESS="${CWM_DOMAIN}"
systemctl start apache2.service
waitOrStop 0 "Failed to start Apache service"
tag global-domain-set.success



echo "Reconfigure SSL in Vhost" | log
sed -i "s|^[ \t]*SSLCertificateFile.*|SSLCertificateFile /etc/letsencrypt/live/$CWM_DOMAIN/fullchain.pem|g" /etc/apache2/sites-available/s9s-ssl.conf
sed -i "s|^[ \t]*SSLCertificateKeyFile.*|SSLCertificateKeyFile /etc/letsencrypt/live/$CWM_DOMAIN/privkey.pem|g" /etc/apache2/sites-available/s9s-ssl.conf

waitOrStop 0 "Failed Reconfigure SSL in Vhost"
systemctl restart apache2.service
waitOrStop 0 "Failed restart apache2.service"

#### SSL END ####

## Remove Ansible ##
apt-get remove -y ansible


## Create new rpc-key and modify relevant files ##
random_rpc=$(date +%s | sha256sum | base64 | head -c 32 ; echo)
echo "rpc_key=${random_rpc}" >> /etc/cmon.cnf
sed -i "s|define('RPC_TOKEN'|//define('RPC_TOKEN'|g" /var/www/html/clustercontrol/bootstrap.php
echo "define('RPC_TOKEN', '${random_rpc}');" >> /var/www/html/clustercontrol/bootstrap.php



###################################################
## Deploy Galera Cluster ##

# wait until cmon is up
echo "waiting for cmon" | log
while ! nc -z localhost 9501; do
  sleep 1
done

## Check that Nodes are responding ##
# IP addresses to ping
ip1=$node_1_ip
ip2=$node_2_ip
ip3=$node_3_ip
# Loop until all IPs have SSH service
echo "testing ssh for ${ip1}, ${ip2}, ${ip3}"
while true; do
    if nc -zv "$ip1" 22 >/dev/null && nc -zv "$ip2" 22 >/dev/null && nc -zv "$ip3" 22 >/dev/null; then
        break
    else
        echo "not all servers are listening on 22 yet" | log
        sleep 1
    fi
done
echo "All IPs have SSH service." | log



echo "adding public key to nodes" | log
apt-get install sshpass
ips=($node_1_ip $node_2_ip $node_3_ip)

echo "Coping ssh-keys nodes" | log
for ip in "${ips[@]}"; do
  echo "Copying SSH key to $ip"
  sshpass -p ${ADMINPASSWORD} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /root/.ssh/id_rsa root@$ip 'cat >> /root/.ssh/authorized_keys' < /root/.ssh/id_rsa.pub
done

#echo "Fix issues with admin user:" | log
#echo "backing up s9s.conf to backup" | log
#mv /etc/s9s.conf /etc/s9s.conf.bak
#echo "Creating dba user to enable admin" | log
#s9s user --create --generate-key --controller="https://localhost:9501" --group=admins dba
#sleep 1
#s9s user --cmon-user=dba --enable admin
#sleep 1
#echo "using reset ccrpc script" | log
#echo "yes" | /var/www/clustercontrol/app/tools/reset-ccrpc.sh
#sleep 10

## Create cmon user named dba
s9s user --create \
  --generate-key \
  --controller="https://localhost:9501" \
  --group=admins dba


echo "Deploying: Run Galera (percona) with 3 servers" | log
s9s cluster --create \
        --cluster-type=galera \
        --nodes="${node_1_ip};${node_2_ip};${node_3_ip}" \
        --vendor=percona \
        --provider-version=5.7 \
        --db-admin-passwd='${ADMINPASSWORD}' \
        --os-user=root \
        --os-key-file=/root/.ssh/id_rsa \
        --cluster-name='Percona XtraDB Cluster 5.7' \
        --wait

s9s cluster --add-node \
        --cluster-id=1 \
        --nodes="haproxy://${CWM_SERVERIP}" \
        --wait


echo "Adding descriptions" | log
descriptionAppend "Run before registration:/var/www/html/clustercontrol/app/tools/reset-ccrpc.sh "
descriptionAppend "cmon config files location: /etc/cmon.cnf"
descriptionAppend "mariaDB user password: ${ADMINPASSWORD}"
descriptionAppend "Galera user password: ${ADMINPASSWORD}"
descriptionAppend "clustercontrol web page: ${CWM_DOMAIN}/clustercontrol"
descriptionAppend "clustercontrol webpage config: /var/www/clustercontrol/bootstrap.php"
descriptionAppend "rpc-key: ${random_rpc}"
descriptionAppend "cmon user(dba) auth: /root/.s9s"
descriptionAppend " "



tag ssl-ready.success
tagScript success
tag apache2.success
tag certbot-apache2.success
tagScript success
exit 0
