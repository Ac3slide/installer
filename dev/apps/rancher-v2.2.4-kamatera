#!/bin/bash

if [ -f "include/startup.sh" ]; then
    . include/startup.sh
elif [ -f "../include/startup.sh" ]; then
    . ../include/startup.sh
fi

########################### DOCKER INSTALL ##########################
echo "Downloading docker repository and key" | log
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable edge"
waitOrStop 0

echo "Install docker-ce" | log
cat > /usr/sbin/policy-rc.d <<EOF
#!/bin/sh
exit 101
EOF
chmod a+x /usr/sbin/policy-rc.d

apt-get install -y docker-ce
waitOrStop 0
checkPackageInstalled docker-ce

rm -f /usr/sbin/policy-rc.d

# Enable Service
systemctl enable docker
systemctl enable containerd

systemctl start docker
systemctl start containerd
######################################################################

# Docker Machine 0.16.1 INSTALL
base=https://github.com/docker/machine/releases/download/v0.16.1 &&
  curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
  install /tmp/docker-machine /usr/local/bin/docker-machine

# install Jq
apt install -y jq

# Install the docker-machine-server.sh script 
cp /opt/installer/tweaks/extras/rancher-2.2.4/0.0.5/docker-machine-server.sh  /usr/local/bin/docker-machine-server.sh

# Install the kamatera-cluster.sh script
cp /opt/installer/tweaks/extras/rancher-2.2.4/0.0.5/kamatera-cluster.sh  /usr/local/bin/kamatera-cluster.sh

# Export Rancher version
export RANCHER_VERSION=v2.2.4
clientId=`cat /root/guest.conf | grep apiClientId | cut -d '=' -f 2`
secret=`cat /root/guest.conf | grep apiSecret | cut -d '=' -f 2`
vlan=`cat /root/guest.conf  | grep lan | grep -v wan | cut -d'=' -f 2`
datacenter=`cat /root/guest.conf | grep zone | cut -d '=' -f 2 | head -1`
export email=`cat /root/guest.conf | grep email | cut -d '=' -f 2`
kamatera-cluster.sh "0.0.5" "${vlan}" << EOF
${clientId}
${secret}
7
/usr/local/bin
rancher-admin-${datacenter}
4096
2B
${datacenter}
50
EOF

activemachine=`docker-machine ls | grep rancher-admin-${datacenter} | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"`

echo "Waiting for Rancher to intialize" | log
HTTPD=`curl -s -o /dev/null -w ''%{http_code}'' https://${activemachine}:443 --insecure`
until [ "$HTTPD" == "200" ]; do
    sleep 3
    HTTPD=`curl -s -o /dev/null -w ''%{http_code}'' https://${activemachine}:443 --insecure`
done
sleep 15

echo "Getting Rancher Login Token" | log
LOGINRESPONSE=`curl -s "https://${activemachine}/v3-public/localProviders/local?action=login" -H 'content-type: application/json' --data-binary '{"username":"admin","password":"admin"}' --insecure`
LOGINTOKEN=`echo $LOGINRESPONSE | jq -r .token`

echo "Changing Web Interface Password" | log
curl -s "https://${activemachine}/v3/users?action=changepassword" -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary "{\"currentPassword\":\"admin\",\"newPassword\":\"${ADMINPASSWORD}\"}" --insecure

echo "Creating API key" | log
APIRESPONSE=`curl -s "https://${activemachine}/v3/token" -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"type":"token","description":"automation"}' --insecure`
echo "Getting API Token" | log
APITOKEN=`echo $APIRESPONSE | jq -r .token`

echo "Listing available Node drivers" | log
CURRENTDRIVERS=`curl -s "https://${activemachine}/v3/nodedrivers" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure | jq -r .data[].actions.deactivate`

echo "Deactivating foreign drivers" | log
for url in ${CURRENTDRIVERS}
    do 
        curl -s "$url" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" -X POST  -d '{}' --insecure 
    done

echo "Adding Kamatera Docker Machine Driver" | log
curl -s "https://${activemachine}/v3/nodedrivers" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" -X POST  -d '{"active":true, "builtin":false, "url":"https://github.com/OriHoch/docker-machine-driver-kamatera/releases/download/v1.0.0-RC2/docker-machine-driver-kamatera_v1.0.0-RC2_linux_amd64.tar.gz", "whitelistDomains":[]}' --insecure 

echo "Listing available Kubernetes drivers" | log
CURRENTDRIVERS=`curl -s "https://${activemachine}/v3/kontainerdrivers" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure | jq -r .data[].actions.deactivate`

echo "Deactivating foreign drivers" | log
for url in ${CURRENTDRIVERS}
    do 
        curl -s "$url" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" -X POST  -d '{}' --insecure 
    done

